{"meta":{"title":"一只程序喵","subtitle":"刘明辉的个人博客","description":null,"author":"刘明辉","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-08-08T07:34:55.547Z","updated":"2019-08-08T07:34:55.546Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-08T07:34:30.115Z","updated":"2019-08-08T07:34:30.115Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2019-08-08T12:10:35.000Z","updated":"2019-08-09T09:10:45.569Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"custom","date":"2019-08-08T07:46:19.000Z","updated":"2019-08-08T07:46:19.813Z","comments":true,"path":"custom/index.html","permalink":"http://yoursite.com/custom/index.html","excerpt":"","text":""}],"posts":[{"title":"那些既熟悉又陌生的C/C++知识点（长期更新）","slug":"那些既熟悉又陌生的C-C-知识点（长期更新）","date":"2019-08-09T15:21:44.000Z","updated":"2019-08-09T16:04:41.156Z","comments":true,"path":"2019/08/09/那些既熟悉又陌生的C-C-知识点（长期更新）/","link":"","permalink":"http://yoursite.com/2019/08/09/那些既熟悉又陌生的C-C-知识点（长期更新）/","excerpt":"","text":"头文件的等价写法在C++标准中，stdio.h更推荐使用等价写法：cstdio，也就是在前面加一个c，然后去掉.h即可。 123/* 以下两种写法等价 */#include&lt;stdio.h&gt;#include&lt;cstdio&gt; 整型变量类型表示数的范围 整型int：32位整数/绝对值在10^9范围以内的整数都可以定义为int型 长整型long long：64位整数/10^18以内（如10^10）的整数就要定义为long long型 long long型的使用long long型赋大于2^31-1的初值，需要在初值后面加上LL 经常利用typedef用LL来代替long long，以避免在程序中大量出现long long而降低编码的效率。 12345678#include&lt;cstdio&gt;typedef long long LL; //给long long起个别名LLint main()&#123; LL a = 123456789012345LL, b = 234567890123456LL; printf(\"%lld\\n\", a + b); return 0;&#125; 浮点数的存储类型对于浮点型，不要使用float，碰到浮点型的数据都应该用double来存储。 单精度float：有效精度只有6~7位 双精度double：有效精度有15~16位 double型的输入输出格式 输出格式：%f（与float型相同） 输入格式：scanf中是%lf 注：有些系统如果把输出格式写成%lf也不会出错，但尽量还是按标准来","categories":[],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"}]},{"title":"deeplearning.ai学习笔记（一）深度学习引言","slug":"deeplearning-ai学习笔记（一）深度学习引言","date":"2019-08-09T06:30:38.000Z","updated":"2019-08-09T09:05:27.062Z","comments":true,"path":"2019/08/09/deeplearning-ai学习笔记（一）深度学习引言/","link":"","permalink":"http://yoursite.com/2019/08/09/deeplearning-ai学习笔记（一）深度学习引言/","excerpt":"AI is the new Electricity. ——吴恩达（Andrew Ng） 大约在一百年前，社会的电气化改变了每个主要行业。而如今我们见到了 AI令人惊讶的能量会产生同样巨大的转变。显然 AI的各个分支中，发展最为迅速的就是深度学习（deep learning）。而深度学习，一般指的是训练神经网络（有时是非常非常大/深的神经网络）。","text":"AI is the new Electricity. ——吴恩达（Andrew Ng） 大约在一百年前，社会的电气化改变了每个主要行业。而如今我们见到了 AI令人惊讶的能量会产生同样巨大的转变。显然 AI的各个分支中，发展最为迅速的就是深度学习（deep learning）。而深度学习，一般指的是训练神经网络（有时是非常非常大/深的神经网络）。 何为神经网络（What is a neural network?）引例：房价预测（Housing Price Prediction）如下图，对于单个因素（如房屋面积）的房屋预测，可以用ReLU函数进行拟合，相当于一个只有一个神经元的神经网络。 ReLU函数拟合 用房子的大小 x 作为神经网络的输入，它进入到这个节点(这个小圈)中 ，然后这个小圈就输出了房价 y 。所以这个小圈，也就是一个神经网络中的一个神经元，就会执行上图中画出的这个方程。 单个神经元的神经网络 一个很大的神经网络是由许多这样的单一神经元叠加在一起组成。比如下面这个例子，我们不仅仅根据房屋大小来预测房屋价格，我们引入其他特征量。能够容纳的家庭人口也会影响房屋价格 ，这个因素其实是取决于房屋大小以及卧室的数量这两个因素决定了这个房子是否能够容纳你的家庭 。 多因素房价预测 所以在这个例子中： x 表示所有这四个输入 (房屋大小、卧室数量、邮政编码、富裕程度) y表示试图去预测的价格 每一个小圆圈是ReLU 函数或者别的一些非线性函数 这就是最基本的神经网络。 简单神经网络 深度学习：监督学习的一种（Supervised Learning with Neural Networks）监督学习与非监督学习监督学习：给定标记好的训练样本集，如回归问题、分类问题 非监督学习：给定样本集，发现特征数据中的分布结构，如聚类问题 监督学习 非监督学习 深度学习在监督学习中的应用 &amp; 常用神经网络 深度学习的应用 几种常见神经网络 结构化数据与非结构化数据 结构化数据与非结构化数据示例 深度学习兴起的原因（Why is Deep Learning taking off?） Scale drives deep learning progress.——吴恩达（Andrew Ng） 深度学习的性能 x-axis is the amount of data （数据量） y-axis (vertical axis) is the performance of the algorithm. （算法性能） 数据量与算法性能关系 当数据量比较少时，深度学习方法性能不一定优于经典机器学习方法。 通过增加数据量和神经网络规模可提升深度学习方法的性能。 深度学习兴起的原因 Data：信息化社会产生了巨大的数据量 Computation：现代计算机计算性能的极大提升（GPU与CPU） Algorithms：算法的优化进一步提升了性能（如ReLU的使用）","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"deeplearning.ai","slug":"deeplearning-ai","permalink":"http://yoursite.com/tags/deeplearning-ai/"}]}]}